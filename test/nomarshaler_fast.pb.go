// Code generated by protoc-gen-go-fast. DO NOT EDIT.
// versions:
//  protoc-gen-go-fast v0.0.1
//  protoc             v3.15.8
// source: test/nomarshaler.proto

package test

import (
	fmt "fmt"
	fastproto "github.com/billyplus/fastproto"
	protohelper "github.com/billyplus/fastproto/protohelper"
	protowire "google.golang.org/protobuf/encoding/protowire"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	math "math"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the packages it is being compiled against.
var _ = fmt.Errorf
var _ = math.MaxFloat32
var _ = protowire.MinValidNumber
var _ = protohelper.Skip
var _ = protoimpl.MinVersion

func (x *WithMarshalUnmarshalSize) XxxReset() {
	*x = WithMarshalUnmarshalSize{}
}

func (x *WithMarshalUnmarshalSize) Unmarshal(data []byte) error {
	for len(data) > 0 {
		num, wireType, n := protowire.ConsumeTag(data)
		if n < 0 {
			return protowire.ParseError(n)
		}
		if num <= 0 {
			return fmt.Errorf("proto: with_marshal_unmarshal_size: illegal tag %d (wire type %d)", num, wireType)
		}
		data = data[n:]
		switch num {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			v, n := protowire.ConsumeVarint(data)
			if n < 0 {
				return protowire.ParseError(n)
			}
			data = data[n:]
			x.Id = uint32(v)
		default:
			_, n = protowire.ConsumeBytes(data)
			if n < 0 {
				return protowire.ParseError(n)
			}
			x.unknownFields = append(x.unknownFields, data[:n]...)
			data = data[n:]
		}
	}
	return nil
}

func (x *WithMarshalUnmarshalSize) MarshalTo(data []byte) (n int, err error) {
	maxN := cap(data)
	data, err = x.AppendToSizedBuffer(data[:0])
	if maxN < len(data) {
		return 0, fmt.Errorf("Not enough space for message(WithMarshalUnmarshalSize)")
	}
	return len(data), nil
}

func (x *WithMarshalUnmarshalSize) Marshal() ([]byte, error) {
	data := make([]byte, 0, fastproto.Size(x))
	data, err := x.AppendToSizedBuffer(data)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func (x *WithMarshalUnmarshalSize) AppendToSizedBuffer(data []byte) (ret []byte, err error) {
	if x.Id != 0 {
		data = protowire.AppendVarint(data, 8)
		data = protowire.AppendVarint(data, uint64(x.Id))
	}
	return data, nil
}

func (x *WithMarshalUnmarshalSize) Size() (n int) {
	if x == nil {
		return 0
	}
	var l int
	_ = l
	if x.Id != 0 {
		n += 1 + protowire.SizeVarint(uint64(x.Id))
	}
	if x.unknownFields != nil {
		n += len(x.unknownFields)
	}
	x.sizeCache = int32(n)
	return
}

func (x *WithUnmarshal) XxxReset() {
	*x = WithUnmarshal{}
}

func (x *WithUnmarshal) Unmarshal(data []byte) error {
	for len(data) > 0 {
		num, wireType, n := protowire.ConsumeTag(data)
		if n < 0 {
			return protowire.ParseError(n)
		}
		if num <= 0 {
			return fmt.Errorf("proto: with_unmarshal: illegal tag %d (wire type %d)", num, wireType)
		}
		data = data[n:]
		switch num {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			v, n := protowire.ConsumeVarint(data)
			if n < 0 {
				return protowire.ParseError(n)
			}
			data = data[n:]
			x.Id = uint32(v)
		default:
			_, n = protowire.ConsumeBytes(data)
			if n < 0 {
				return protowire.ParseError(n)
			}
			x.unknownFields = append(x.unknownFields, data[:n]...)
			data = data[n:]
		}
	}
	return nil
}

func (x *WithUnmarshalSize) XxxReset() {
	*x = WithUnmarshalSize{}
}

func (x *WithUnmarshalSize) Unmarshal(data []byte) error {
	for len(data) > 0 {
		num, wireType, n := protowire.ConsumeTag(data)
		if n < 0 {
			return protowire.ParseError(n)
		}
		if num <= 0 {
			return fmt.Errorf("proto: with_unmarshal_size: illegal tag %d (wire type %d)", num, wireType)
		}
		data = data[n:]
		switch num {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			v, n := protowire.ConsumeVarint(data)
			if n < 0 {
				return protowire.ParseError(n)
			}
			data = data[n:]
			x.Id = uint32(v)
		default:
			_, n = protowire.ConsumeBytes(data)
			if n < 0 {
				return protowire.ParseError(n)
			}
			x.unknownFields = append(x.unknownFields, data[:n]...)
			data = data[n:]
		}
	}
	return nil
}

func (x *WithUnmarshalSize) Size() (n int) {
	if x == nil {
		return 0
	}
	var l int
	_ = l
	if x.Id != 0 {
		n += 1 + protowire.SizeVarint(uint64(x.Id))
	}
	if x.unknownFields != nil {
		n += len(x.unknownFields)
	}
	x.sizeCache = int32(n)
	return
}
