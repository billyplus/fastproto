// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: test/equaler.proto

package test

import (
	_ "github.com/billyplus/fastproto/options"
	pb "github.com/billyplus/fastproto/test/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EqualProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	VInt32  int32  `protobuf:"varint,1,opt,name=v_int32,json=vInt32,proto3" json:"v_int32,omitempty"`
	VInt64  int64  `protobuf:"varint,2,opt,name=v_int64,json=vInt64,proto3" json:"v_int64,omitempty"`
	VUint32 uint32 `protobuf:"varint,3,opt,name=v_uint32,json=vUint32,proto3" json:"v_uint32,omitempty"`
	VUint64 uint64 `protobuf:"varint,4,opt,name=v_uint64,json=vUint64,proto3" json:"v_uint64,omitempty"`
	VString string `protobuf:"bytes,5,opt,name=v_string,json=vString,proto3" json:"v_string,omitempty"`
	VBytes  []byte `protobuf:"bytes,20,opt,name=v_bytes,json=vBytes,proto3" json:"v_bytes,omitempty"`
	VBool   bool   `protobuf:"varint,6,opt,name=v_bool,json=vBool,proto3" json:"v_bool,omitempty"`
	//
	SInt32   int32  `protobuf:"zigzag32,7,opt,name=s_int32,json=sInt32,proto3" json:"s_int32,omitempty"`
	SInt64   int64  `protobuf:"zigzag64,8,opt,name=s_int64,json=sInt64,proto3" json:"s_int64,omitempty"`
	Fixed32  uint32 `protobuf:"fixed32,9,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Fixed64  uint64 `protobuf:"fixed64,10,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Sfixed32 int32  `protobuf:"fixed32,11,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Sfixed64 int64  `protobuf:"fixed64,12,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	//
	ArrInt32  []int32  `protobuf:"varint,41,rep,packed,name=arr_int32,json=arrInt32,proto3" json:"arr_int32,omitempty"`
	ArrInt64  []int64  `protobuf:"varint,42,rep,packed,name=arr_int64,json=arrInt64,proto3" json:"arr_int64,omitempty"`
	ArrUint32 []uint32 `protobuf:"varint,43,rep,packed,name=arr_uint32,json=arrUint32,proto3" json:"arr_uint32,omitempty"`
	ArrUint64 []uint64 `protobuf:"varint,44,rep,packed,name=arr_uint64,json=arrUint64,proto3" json:"arr_uint64,omitempty"`
	ArrBool   []bool   `protobuf:"varint,45,rep,packed,name=arr_bool,json=arrBool,proto3" json:"arr_bool,omitempty"`
	ArrString []string `protobuf:"bytes,46,rep,name=arr_string,json=arrString,proto3" json:"arr_string,omitempty"`
	ArrBytes  [][]byte `protobuf:"bytes,47,rep,name=arr_bytes,json=arrBytes,proto3" json:"arr_bytes,omitempty"`
	//
	MapInt32Bool       map[int32]bool           `protobuf:"bytes,81,rep,name=map_int32_bool,json=mapInt32Bool,proto3" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int32      map[int32]int32          `protobuf:"bytes,82,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32String     map[int32]string         `protobuf:"bytes,83,rep,name=map_int32_string,json=mapInt32String,proto3" json:"map_int32_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Bool       map[int64]bool           `protobuf:"bytes,101,rep,name=map_int64_bool,json=mapInt64Bool,proto3" json:"map_int64_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Int64      map[int64]int64          `protobuf:"bytes,102,rep,name=map_int64_int64,json=mapInt64Int64,proto3" json:"map_int64_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Bytes      map[int64][]byte         `protobuf:"bytes,103,rep,name=map_int64_bytes,json=mapInt64Bytes,proto3" json:"map_int64_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapSint32Sint64    map[int32]int64          `protobuf:"bytes,121,rep,name=map_sint32_sint64,json=mapSint32Sint64,proto3" json:"map_sint32_sint64,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapSint64Sint32    map[int64]int32          `protobuf:"bytes,141,rep,name=map_sint64_sint32,json=mapSint64Sint32,proto3" json:"map_sint64_sint32,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapFixed32Sfixed64 map[uint32]int64         `protobuf:"bytes,161,rep,name=map_fixed32_sfixed64,json=mapFixed32Sfixed64,proto3" json:"map_fixed32_sfixed64,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapSfixed32Fixed64 map[int32]uint64         `protobuf:"bytes,181,rep,name=map_sfixed32_fixed64,json=mapSfixed32Fixed64,proto3" json:"map_sfixed32_fixed64,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStringBool      map[string]bool          `protobuf:"bytes,201,rep,name=map_string_bool,json=mapStringBool,proto3" json:"map_string_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt32     map[string]int32         `protobuf:"bytes,202,rep,name=map_string_int32,json=mapStringInt32,proto3" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt64     map[string]int64         `protobuf:"bytes,203,rep,name=map_string_int64,json=mapStringInt64,proto3" json:"map_string_int64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringSint64    map[string]int64         `protobuf:"bytes,204,rep,name=map_string_sint64,json=mapStringSint64,proto3" json:"map_string_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapStringSfixed64  map[string]int64         `protobuf:"bytes,205,rep,name=map_string_sfixed64,json=mapStringSfixed64,proto3" json:"map_string_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStringString    map[string]string        `protobuf:"bytes,206,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringEnum      map[string]TestEnum      `protobuf:"bytes,207,rep,name=map_string_enum,json=mapStringEnum,proto3" json:"map_string_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.TestEnum"` //
	MActor             *OtherMessage            `protobuf:"bytes,231,opt,name=m_actor,json=mActor,proto3" json:"m_actor,omitempty"`
	ArrActor           []*OtherMessage          `protobuf:"bytes,232,rep,name=arr_actor,json=arrActor,proto3" json:"arr_actor,omitempty"`
	MapStringActor     map[string]*OtherMessage `protobuf:"bytes,233,rep,name=map_string_actor,json=mapStringActor,proto3" json:"map_string_actor,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Actor      map[int32]*OtherMessage  `protobuf:"bytes,234,rep,name=map_int32_actor,json=mapInt32Actor,proto3" json:"map_int32_actor,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Actor      map[int64]*OtherMessage  `protobuf:"bytes,235,rep,name=map_int64_actor,json=mapInt64Actor,proto3" json:"map_int64_actor,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outer              *pb.OuterMsg             `protobuf:"bytes,281,opt,name=outer,proto3" json:"outer,omitempty"`
	Nofase             *pb.NoFastMessage        `protobuf:"bytes,282,opt,name=nofase,proto3" json:"nofase,omitempty"`
	Nofasts            []*pb.NoFastMessage      `protobuf:"bytes,283,rep,name=nofasts,proto3" json:"nofasts,omitempty"`
	LastUpdated        *timestamppb.Timestamp   `protobuf:"bytes,284,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *EqualProto) Reset() {
	*x = EqualProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_equaler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqualProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqualProto) ProtoMessage() {}

func (x *EqualProto) ProtoReflect() protoreflect.Message {
	mi := &file_test_equaler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqualProto.ProtoReflect.Descriptor instead.
func (*EqualProto) Descriptor() ([]byte, []int) {
	return file_test_equaler_proto_rawDescGZIP(), []int{0}
}

func (x *EqualProto) GetVInt32() int32 {
	if x != nil {
		return x.VInt32
	}
	return 0
}

func (x *EqualProto) GetVInt64() int64 {
	if x != nil {
		return x.VInt64
	}
	return 0
}

func (x *EqualProto) GetVUint32() uint32 {
	if x != nil {
		return x.VUint32
	}
	return 0
}

func (x *EqualProto) GetVUint64() uint64 {
	if x != nil {
		return x.VUint64
	}
	return 0
}

func (x *EqualProto) GetVString() string {
	if x != nil {
		return x.VString
	}
	return ""
}

func (x *EqualProto) GetVBytes() []byte {
	if x != nil {
		return x.VBytes
	}
	return nil
}

func (x *EqualProto) GetVBool() bool {
	if x != nil {
		return x.VBool
	}
	return false
}

func (x *EqualProto) GetSInt32() int32 {
	if x != nil {
		return x.SInt32
	}
	return 0
}

func (x *EqualProto) GetSInt64() int64 {
	if x != nil {
		return x.SInt64
	}
	return 0
}

func (x *EqualProto) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *EqualProto) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *EqualProto) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *EqualProto) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *EqualProto) GetArrInt32() []int32 {
	if x != nil {
		return x.ArrInt32
	}
	return nil
}

func (x *EqualProto) GetArrInt64() []int64 {
	if x != nil {
		return x.ArrInt64
	}
	return nil
}

func (x *EqualProto) GetArrUint32() []uint32 {
	if x != nil {
		return x.ArrUint32
	}
	return nil
}

func (x *EqualProto) GetArrUint64() []uint64 {
	if x != nil {
		return x.ArrUint64
	}
	return nil
}

func (x *EqualProto) GetArrBool() []bool {
	if x != nil {
		return x.ArrBool
	}
	return nil
}

func (x *EqualProto) GetArrString() []string {
	if x != nil {
		return x.ArrString
	}
	return nil
}

func (x *EqualProto) GetArrBytes() [][]byte {
	if x != nil {
		return x.ArrBytes
	}
	return nil
}

func (x *EqualProto) GetMapInt32Bool() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool
	}
	return nil
}

func (x *EqualProto) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *EqualProto) GetMapInt32String() map[int32]string {
	if x != nil {
		return x.MapInt32String
	}
	return nil
}

func (x *EqualProto) GetMapInt64Bool() map[int64]bool {
	if x != nil {
		return x.MapInt64Bool
	}
	return nil
}

func (x *EqualProto) GetMapInt64Int64() map[int64]int64 {
	if x != nil {
		return x.MapInt64Int64
	}
	return nil
}

func (x *EqualProto) GetMapInt64Bytes() map[int64][]byte {
	if x != nil {
		return x.MapInt64Bytes
	}
	return nil
}

func (x *EqualProto) GetMapSint32Sint64() map[int32]int64 {
	if x != nil {
		return x.MapSint32Sint64
	}
	return nil
}

func (x *EqualProto) GetMapSint64Sint32() map[int64]int32 {
	if x != nil {
		return x.MapSint64Sint32
	}
	return nil
}

func (x *EqualProto) GetMapFixed32Sfixed64() map[uint32]int64 {
	if x != nil {
		return x.MapFixed32Sfixed64
	}
	return nil
}

func (x *EqualProto) GetMapSfixed32Fixed64() map[int32]uint64 {
	if x != nil {
		return x.MapSfixed32Fixed64
	}
	return nil
}

func (x *EqualProto) GetMapStringBool() map[string]bool {
	if x != nil {
		return x.MapStringBool
	}
	return nil
}

func (x *EqualProto) GetMapStringInt32() map[string]int32 {
	if x != nil {
		return x.MapStringInt32
	}
	return nil
}

func (x *EqualProto) GetMapStringInt64() map[string]int64 {
	if x != nil {
		return x.MapStringInt64
	}
	return nil
}

func (x *EqualProto) GetMapStringSint64() map[string]int64 {
	if x != nil {
		return x.MapStringSint64
	}
	return nil
}

func (x *EqualProto) GetMapStringSfixed64() map[string]int64 {
	if x != nil {
		return x.MapStringSfixed64
	}
	return nil
}

func (x *EqualProto) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

func (x *EqualProto) GetMapStringEnum() map[string]TestEnum {
	if x != nil {
		return x.MapStringEnum
	}
	return nil
}

func (x *EqualProto) GetMActor() *OtherMessage {
	if x != nil {
		return x.MActor
	}
	return nil
}

func (x *EqualProto) GetArrActor() []*OtherMessage {
	if x != nil {
		return x.ArrActor
	}
	return nil
}

func (x *EqualProto) GetMapStringActor() map[string]*OtherMessage {
	if x != nil {
		return x.MapStringActor
	}
	return nil
}

func (x *EqualProto) GetMapInt32Actor() map[int32]*OtherMessage {
	if x != nil {
		return x.MapInt32Actor
	}
	return nil
}

func (x *EqualProto) GetMapInt64Actor() map[int64]*OtherMessage {
	if x != nil {
		return x.MapInt64Actor
	}
	return nil
}

func (x *EqualProto) GetOuter() *pb.OuterMsg {
	if x != nil {
		return x.Outer
	}
	return nil
}

func (x *EqualProto) GetNofase() *pb.NoFastMessage {
	if x != nil {
		return x.Nofase
	}
	return nil
}

func (x *EqualProto) GetNofasts() []*pb.NoFastMessage {
	if x != nil {
		return x.Nofasts
	}
	return nil
}

func (x *EqualProto) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

var File_test_equaler_proto protoreflect.FileDescriptor

var file_test_equaler_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x6e, 0x6f, 0x66, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x1e, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x29, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x72, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x72, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x2b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x2c,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x61, 0x72, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x2d, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x72, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x72,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x72,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x51, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x4b, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x52, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4e, 0x0a,
	0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a,
	0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x4b, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x52, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x8d, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5b, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0xa1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x5b, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xb5, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0xca, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x52, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x58, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xcd, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x52, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xce, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xcf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xe7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x09, 0x61, 0x72, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xe8, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x61, 0x72, 0x72, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xe9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0xea, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x99, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x6e, 0x6f, 0x66, 0x61, 0x73, 0x65, 0x18, 0x9a,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x46, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6e, 0x6f, 0x66, 0x61, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x6f, 0x66, 0x61, 0x73, 0x74, 0x73, 0x18, 0x9b, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x66, 0x61, 0x73, 0x74, 0x73, 0x12, 0x3e,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x9c,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x3f,
	0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54,
	0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x31, 0x5a, 0x23, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x79, 0x70, 0x6c,
	0x75, 0x73, 0x2f, 0x66, 0x61, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x90, 0xac, 0x1b, 0x01, 0xa0, 0xac, 0x1b, 0x01, 0xb0, 0xac, 0x1b, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_equaler_proto_rawDescOnce sync.Once
	file_test_equaler_proto_rawDescData = file_test_equaler_proto_rawDesc
)

func file_test_equaler_proto_rawDescGZIP() []byte {
	file_test_equaler_proto_rawDescOnce.Do(func() {
		file_test_equaler_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_equaler_proto_rawDescData)
	})
	return file_test_equaler_proto_rawDescData
}

var file_test_equaler_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_test_equaler_proto_goTypes = []interface{}{
	(*EqualProto)(nil),            // 0: test.EqualProto
	nil,                           // 1: test.EqualProto.MapInt32BoolEntry
	nil,                           // 2: test.EqualProto.MapInt32Int32Entry
	nil,                           // 3: test.EqualProto.MapInt32StringEntry
	nil,                           // 4: test.EqualProto.MapInt64BoolEntry
	nil,                           // 5: test.EqualProto.MapInt64Int64Entry
	nil,                           // 6: test.EqualProto.MapInt64BytesEntry
	nil,                           // 7: test.EqualProto.MapSint32Sint64Entry
	nil,                           // 8: test.EqualProto.MapSint64Sint32Entry
	nil,                           // 9: test.EqualProto.MapFixed32Sfixed64Entry
	nil,                           // 10: test.EqualProto.MapSfixed32Fixed64Entry
	nil,                           // 11: test.EqualProto.MapStringBoolEntry
	nil,                           // 12: test.EqualProto.MapStringInt32Entry
	nil,                           // 13: test.EqualProto.MapStringInt64Entry
	nil,                           // 14: test.EqualProto.MapStringSint64Entry
	nil,                           // 15: test.EqualProto.MapStringSfixed64Entry
	nil,                           // 16: test.EqualProto.MapStringStringEntry
	nil,                           // 17: test.EqualProto.MapStringEnumEntry
	nil,                           // 18: test.EqualProto.MapStringActorEntry
	nil,                           // 19: test.EqualProto.MapInt32ActorEntry
	nil,                           // 20: test.EqualProto.MapInt64ActorEntry
	(*OtherMessage)(nil),          // 21: test.OtherMessage
	(*pb.OuterMsg)(nil),           // 22: pb.OuterMsg
	(*pb.NoFastMessage)(nil),      // 23: pb.NoFastMessage
	(*timestamppb.Timestamp)(nil), // 24: google.protobuf.Timestamp
	(TestEnum)(0),                 // 25: test.TestEnum
}
var file_test_equaler_proto_depIdxs = []int32{
	1,  // 0: test.EqualProto.map_int32_bool:type_name -> test.EqualProto.MapInt32BoolEntry
	2,  // 1: test.EqualProto.map_int32_int32:type_name -> test.EqualProto.MapInt32Int32Entry
	3,  // 2: test.EqualProto.map_int32_string:type_name -> test.EqualProto.MapInt32StringEntry
	4,  // 3: test.EqualProto.map_int64_bool:type_name -> test.EqualProto.MapInt64BoolEntry
	5,  // 4: test.EqualProto.map_int64_int64:type_name -> test.EqualProto.MapInt64Int64Entry
	6,  // 5: test.EqualProto.map_int64_bytes:type_name -> test.EqualProto.MapInt64BytesEntry
	7,  // 6: test.EqualProto.map_sint32_sint64:type_name -> test.EqualProto.MapSint32Sint64Entry
	8,  // 7: test.EqualProto.map_sint64_sint32:type_name -> test.EqualProto.MapSint64Sint32Entry
	9,  // 8: test.EqualProto.map_fixed32_sfixed64:type_name -> test.EqualProto.MapFixed32Sfixed64Entry
	10, // 9: test.EqualProto.map_sfixed32_fixed64:type_name -> test.EqualProto.MapSfixed32Fixed64Entry
	11, // 10: test.EqualProto.map_string_bool:type_name -> test.EqualProto.MapStringBoolEntry
	12, // 11: test.EqualProto.map_string_int32:type_name -> test.EqualProto.MapStringInt32Entry
	13, // 12: test.EqualProto.map_string_int64:type_name -> test.EqualProto.MapStringInt64Entry
	14, // 13: test.EqualProto.map_string_sint64:type_name -> test.EqualProto.MapStringSint64Entry
	15, // 14: test.EqualProto.map_string_sfixed64:type_name -> test.EqualProto.MapStringSfixed64Entry
	16, // 15: test.EqualProto.map_string_string:type_name -> test.EqualProto.MapStringStringEntry
	17, // 16: test.EqualProto.map_string_enum:type_name -> test.EqualProto.MapStringEnumEntry
	21, // 17: test.EqualProto.m_actor:type_name -> test.OtherMessage
	21, // 18: test.EqualProto.arr_actor:type_name -> test.OtherMessage
	18, // 19: test.EqualProto.map_string_actor:type_name -> test.EqualProto.MapStringActorEntry
	19, // 20: test.EqualProto.map_int32_actor:type_name -> test.EqualProto.MapInt32ActorEntry
	20, // 21: test.EqualProto.map_int64_actor:type_name -> test.EqualProto.MapInt64ActorEntry
	22, // 22: test.EqualProto.outer:type_name -> pb.OuterMsg
	23, // 23: test.EqualProto.nofase:type_name -> pb.NoFastMessage
	23, // 24: test.EqualProto.nofasts:type_name -> pb.NoFastMessage
	24, // 25: test.EqualProto.last_updated:type_name -> google.protobuf.Timestamp
	25, // 26: test.EqualProto.MapStringEnumEntry.value:type_name -> test.TestEnum
	21, // 27: test.EqualProto.MapStringActorEntry.value:type_name -> test.OtherMessage
	21, // 28: test.EqualProto.MapInt32ActorEntry.value:type_name -> test.OtherMessage
	21, // 29: test.EqualProto.MapInt64ActorEntry.value:type_name -> test.OtherMessage
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_test_equaler_proto_init() }
func file_test_equaler_proto_init() {
	if File_test_equaler_proto != nil {
		return
	}
	file_test_msg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_test_equaler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EqualProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_equaler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_equaler_proto_goTypes,
		DependencyIndexes: file_test_equaler_proto_depIdxs,
		MessageInfos:      file_test_equaler_proto_msgTypes,
	}.Build()
	File_test_equaler_proto = out.File
	file_test_equaler_proto_rawDesc = nil
	file_test_equaler_proto_goTypes = nil
	file_test_equaler_proto_depIdxs = nil
}
