package internal

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

// A Plugin provides functionality to add to the output during Go code generation,
// such as to produce RPC stubs.
type Plugin interface {
	// Name identifies the plugin.
	Name() string
	// Init is called once after data structures are built but before
	// code generation begins.
	// Init(g *Generator)
	Init()
	// Generate produces the code generated by the plugin for messages in this file,
	GenerateMessage(gen *protogen.Plugin, g *protogen.GeneratedFile, f *protogen.File, idx int, m *protogen.Message)
	// GenerateImports produces the import declarations for this file.
	// It is called after Generate.
	// GenerateImports(file *FileDescriptor)
}

var plugins []Plugin

// RegisterPlugin installs a (second-order) plugin to be run when the Go output is generated.
// It is typically called during initialization.
func RegisterPlugin(p Plugin) {
	plugins = append(plugins, p)
}

func EnablePlugins(param string) {
	if param == "" {
		// enable all plugs by default
		return
	}
	pluginList := strings.Split(param, "+")
	enabled := make(map[string]bool)
	for _, p := range pluginList {
		enabled[p] = true
	}
	var nplugins []Plugin
	for _, p := range plugins {
		if enabled[p.Name()] {
			nplugins = append(nplugins, p)
		}
	}
	plugins = nplugins
}
